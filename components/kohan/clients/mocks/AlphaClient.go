// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/amanhigh/go-fun/models/common"

	mock "github.com/stretchr/testify/mock"

	tax "github.com/amanhigh/go-fun/models/tax"
)

// AlphaClient is an autogenerated mock type for the AlphaClient type
type AlphaClient struct {
	mock.Mock
}

type AlphaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AlphaClient) EXPECT() *AlphaClient_Expecter {
	return &AlphaClient_Expecter{mock: &_m.Mock}
}

// FetchDailyPrices provides a mock function with given fields: ctx, ticker
func (_m *AlphaClient) FetchDailyPrices(ctx context.Context, ticker string) (tax.StockData, common.HttpError) {
	ret := _m.Called(ctx, ticker)

	if len(ret) == 0 {
		panic("no return value specified for FetchDailyPrices")
	}

	var r0 tax.StockData
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, string) (tax.StockData, common.HttpError)); ok {
		return rf(ctx, ticker)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) tax.StockData); ok {
		r0 = rf(ctx, ticker)
	} else {
		r0 = ret.Get(0).(tax.StockData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) common.HttpError); ok {
		r1 = rf(ctx, ticker)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// AlphaClient_FetchDailyPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchDailyPrices'
type AlphaClient_FetchDailyPrices_Call struct {
	*mock.Call
}

// FetchDailyPrices is a helper method to define mock.On call
//   - ctx context.Context
//   - ticker string
func (_e *AlphaClient_Expecter) FetchDailyPrices(ctx interface{}, ticker interface{}) *AlphaClient_FetchDailyPrices_Call {
	return &AlphaClient_FetchDailyPrices_Call{Call: _e.mock.On("FetchDailyPrices", ctx, ticker)}
}

func (_c *AlphaClient_FetchDailyPrices_Call) Run(run func(ctx context.Context, ticker string)) *AlphaClient_FetchDailyPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AlphaClient_FetchDailyPrices_Call) Return(_a0 tax.StockData, _a1 common.HttpError) *AlphaClient_FetchDailyPrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlphaClient_FetchDailyPrices_Call) RunAndReturn(run func(context.Context, string) (tax.StockData, common.HttpError)) *AlphaClient_FetchDailyPrices_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlphaClient creates a new instance of AlphaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlphaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlphaClient {
	mock := &AlphaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
