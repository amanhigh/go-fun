// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/common"
	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

type AccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepository) EXPECT() *AccountRepository_Expecter {
	return &AccountRepository_Expecter{mock: &_m.Mock}
}

// GetAllRecordsForYear provides a mock function for the type AccountRepository
func (_mock *AccountRepository) GetAllRecordsForYear(ctx context.Context, year int) ([]tax.Account, common.HttpError) {
	ret := _mock.Called(ctx, year)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRecordsForYear")
	}

	var r0 []tax.Account
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tax.Account, common.HttpError)); ok {
		return returnFunc(ctx, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tax.Account); ok {
		r0 = returnFunc(ctx, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) common.HttpError); ok {
		r1 = returnFunc(ctx, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// AccountRepository_GetAllRecordsForYear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRecordsForYear'
type AccountRepository_GetAllRecordsForYear_Call struct {
	*mock.Call
}

// GetAllRecordsForYear is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
func (_e *AccountRepository_Expecter) GetAllRecordsForYear(ctx interface{}, year interface{}) *AccountRepository_GetAllRecordsForYear_Call {
	return &AccountRepository_GetAllRecordsForYear_Call{Call: _e.mock.On("GetAllRecordsForYear", ctx, year)}
}

func (_c *AccountRepository_GetAllRecordsForYear_Call) Run(run func(ctx context.Context, year int)) *AccountRepository_GetAllRecordsForYear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccountRepository_GetAllRecordsForYear_Call) Return(accounts []tax.Account, httpError common.HttpError) *AccountRepository_GetAllRecordsForYear_Call {
	_c.Call.Return(accounts, httpError)
	return _c
}

func (_c *AccountRepository_GetAllRecordsForYear_Call) RunAndReturn(run func(ctx context.Context, year int) ([]tax.Account, common.HttpError)) *AccountRepository_GetAllRecordsForYear_Call {
	_c.Call.Return(run)
	return _c
}

// SaveYearEndAccounts provides a mock function for the type AccountRepository
func (_mock *AccountRepository) SaveYearEndAccounts(ctx context.Context, year int, accounts []tax.Account) common.HttpError {
	ret := _mock.Called(ctx, year, accounts)

	if len(ret) == 0 {
		panic("no return value specified for SaveYearEndAccounts")
	}

	var r0 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, []tax.Account) common.HttpError); ok {
		r0 = returnFunc(ctx, year, accounts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.HttpError)
		}
	}
	return r0
}

// AccountRepository_SaveYearEndAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveYearEndAccounts'
type AccountRepository_SaveYearEndAccounts_Call struct {
	*mock.Call
}

// SaveYearEndAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
//   - accounts []tax.Account
func (_e *AccountRepository_Expecter) SaveYearEndAccounts(ctx interface{}, year interface{}, accounts interface{}) *AccountRepository_SaveYearEndAccounts_Call {
	return &AccountRepository_SaveYearEndAccounts_Call{Call: _e.mock.On("SaveYearEndAccounts", ctx, year, accounts)}
}

func (_c *AccountRepository_SaveYearEndAccounts_Call) Run(run func(ctx context.Context, year int, accounts []tax.Account)) *AccountRepository_SaveYearEndAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []tax.Account
		if args[2] != nil {
			arg2 = args[2].([]tax.Account)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccountRepository_SaveYearEndAccounts_Call) Return(httpError common.HttpError) *AccountRepository_SaveYearEndAccounts_Call {
	_c.Call.Return(httpError)
	return _c
}

func (_c *AccountRepository_SaveYearEndAccounts_Call) RunAndReturn(run func(ctx context.Context, year int, accounts []tax.Account) common.HttpError) *AccountRepository_SaveYearEndAccounts_Call {
	_c.Call.Return(run)
	return _c
}
