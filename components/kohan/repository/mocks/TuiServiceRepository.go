// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TuiServiceRepository is an autogenerated mock type for the TuiServiceRepository type
type TuiServiceRepository struct {
	mock.Mock
}

type TuiServiceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TuiServiceRepository) EXPECT() *TuiServiceRepository_Expecter {
	return &TuiServiceRepository_Expecter{mock: &_m.Mock}
}

// ExecuteMakeCommand provides a mock function with given fields: makeDir, file, target
func (_m *TuiServiceRepository) ExecuteMakeCommand(makeDir string, file string, target string) ([]string, error) {
	ret := _m.Called(makeDir, file, target)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteMakeCommand")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]string, error)); ok {
		return rf(makeDir, file, target)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(makeDir, file, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(makeDir, file, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TuiServiceRepository_ExecuteMakeCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteMakeCommand'
type TuiServiceRepository_ExecuteMakeCommand_Call struct {
	*mock.Call
}

// ExecuteMakeCommand is a helper method to define mock.On call
//   - makeDir string
//   - file string
//   - target string
func (_e *TuiServiceRepository_Expecter) ExecuteMakeCommand(makeDir interface{}, file interface{}, target interface{}) *TuiServiceRepository_ExecuteMakeCommand_Call {
	return &TuiServiceRepository_ExecuteMakeCommand_Call{Call: _e.mock.On("ExecuteMakeCommand", makeDir, file, target)}
}

func (_c *TuiServiceRepository_ExecuteMakeCommand_Call) Run(run func(makeDir string, file string, target string)) *TuiServiceRepository_ExecuteMakeCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TuiServiceRepository_ExecuteMakeCommand_Call) Return(_a0 []string, _a1 error) *TuiServiceRepository_ExecuteMakeCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TuiServiceRepository_ExecuteMakeCommand_Call) RunAndReturn(run func(string, string, string) ([]string, error)) *TuiServiceRepository_ExecuteMakeCommand_Call {
	_c.Call.Return(run)
	return _c
}

// LoadAvailableServices provides a mock function with given fields: makeDir
func (_m *TuiServiceRepository) LoadAvailableServices(makeDir string) ([]string, error) {
	ret := _m.Called(makeDir)

	if len(ret) == 0 {
		panic("no return value specified for LoadAvailableServices")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(makeDir)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(makeDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(makeDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TuiServiceRepository_LoadAvailableServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadAvailableServices'
type TuiServiceRepository_LoadAvailableServices_Call struct {
	*mock.Call
}

// LoadAvailableServices is a helper method to define mock.On call
//   - makeDir string
func (_e *TuiServiceRepository_Expecter) LoadAvailableServices(makeDir interface{}) *TuiServiceRepository_LoadAvailableServices_Call {
	return &TuiServiceRepository_LoadAvailableServices_Call{Call: _e.mock.On("LoadAvailableServices", makeDir)}
}

func (_c *TuiServiceRepository_LoadAvailableServices_Call) Run(run func(makeDir string)) *TuiServiceRepository_LoadAvailableServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TuiServiceRepository_LoadAvailableServices_Call) Return(_a0 []string, _a1 error) *TuiServiceRepository_LoadAvailableServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TuiServiceRepository_LoadAvailableServices_Call) RunAndReturn(run func(string) ([]string, error)) *TuiServiceRepository_LoadAvailableServices_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSelectedServices provides a mock function with given fields: filePath
func (_m *TuiServiceRepository) LoadSelectedServices(filePath string) ([]string, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for LoadSelectedServices")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TuiServiceRepository_LoadSelectedServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSelectedServices'
type TuiServiceRepository_LoadSelectedServices_Call struct {
	*mock.Call
}

// LoadSelectedServices is a helper method to define mock.On call
//   - filePath string
func (_e *TuiServiceRepository_Expecter) LoadSelectedServices(filePath interface{}) *TuiServiceRepository_LoadSelectedServices_Call {
	return &TuiServiceRepository_LoadSelectedServices_Call{Call: _e.mock.On("LoadSelectedServices", filePath)}
}

func (_c *TuiServiceRepository_LoadSelectedServices_Call) Run(run func(filePath string)) *TuiServiceRepository_LoadSelectedServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TuiServiceRepository_LoadSelectedServices_Call) Return(_a0 []string, _a1 error) *TuiServiceRepository_LoadSelectedServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TuiServiceRepository_LoadSelectedServices_Call) RunAndReturn(run func(string) ([]string, error)) *TuiServiceRepository_LoadSelectedServices_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSelectedServices provides a mock function with given fields: filePath, services
func (_m *TuiServiceRepository) SaveSelectedServices(filePath string, services []string) error {
	ret := _m.Called(filePath, services)

	if len(ret) == 0 {
		panic("no return value specified for SaveSelectedServices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(filePath, services)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TuiServiceRepository_SaveSelectedServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSelectedServices'
type TuiServiceRepository_SaveSelectedServices_Call struct {
	*mock.Call
}

// SaveSelectedServices is a helper method to define mock.On call
//   - filePath string
//   - services []string
func (_e *TuiServiceRepository_Expecter) SaveSelectedServices(filePath interface{}, services interface{}) *TuiServiceRepository_SaveSelectedServices_Call {
	return &TuiServiceRepository_SaveSelectedServices_Call{Call: _e.mock.On("SaveSelectedServices", filePath, services)}
}

func (_c *TuiServiceRepository_SaveSelectedServices_Call) Run(run func(filePath string, services []string)) *TuiServiceRepository_SaveSelectedServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *TuiServiceRepository_SaveSelectedServices_Call) Return(_a0 error) *TuiServiceRepository_SaveSelectedServices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TuiServiceRepository_SaveSelectedServices_Call) RunAndReturn(run func(string, []string) error) *TuiServiceRepository_SaveSelectedServices_Call {
	_c.Call.Return(run)
	return _c
}

// NewTuiServiceRepository creates a new instance of TuiServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTuiServiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TuiServiceRepository {
	mock := &TuiServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
