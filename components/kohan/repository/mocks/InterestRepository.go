// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/amanhigh/go-fun/models/common"

	mock "github.com/stretchr/testify/mock"

	tax "github.com/amanhigh/go-fun/models/tax"
)

// InterestRepository is an autogenerated mock type for the InterestRepository type
type InterestRepository struct {
	mock.Mock
}

type InterestRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *InterestRepository) EXPECT() *InterestRepository_Expecter {
	return &InterestRepository_Expecter{mock: &_m.Mock}
}

// GetAllRecords provides a mock function with given fields: ctx
func (_m *InterestRepository) GetAllRecords(ctx context.Context) ([]tax.Interest, common.HttpError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllRecords")
	}

	var r0 []tax.Interest
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context) ([]tax.Interest, common.HttpError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []tax.Interest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Interest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) common.HttpError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// InterestRepository_GetAllRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllRecords'
type InterestRepository_GetAllRecords_Call struct {
	*mock.Call
}

// GetAllRecords is a helper method to define mock.On call
//   - ctx context.Context
func (_e *InterestRepository_Expecter) GetAllRecords(ctx interface{}) *InterestRepository_GetAllRecords_Call {
	return &InterestRepository_GetAllRecords_Call{Call: _e.mock.On("GetAllRecords", ctx)}
}

func (_c *InterestRepository_GetAllRecords_Call) Run(run func(ctx context.Context)) *InterestRepository_GetAllRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *InterestRepository_GetAllRecords_Call) Return(_a0 []tax.Interest, _a1 common.HttpError) *InterestRepository_GetAllRecords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InterestRepository_GetAllRecords_Call) RunAndReturn(run func(context.Context) ([]tax.Interest, common.HttpError)) *InterestRepository_GetAllRecords_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordsForTicker provides a mock function with given fields: ctx, ticker
func (_m *InterestRepository) GetRecordsForTicker(ctx context.Context, ticker string) ([]tax.Interest, common.HttpError) {
	ret := _m.Called(ctx, ticker)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordsForTicker")
	}

	var r0 []tax.Interest
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]tax.Interest, common.HttpError)); ok {
		return rf(ctx, ticker)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []tax.Interest); ok {
		r0 = rf(ctx, ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Interest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) common.HttpError); ok {
		r1 = rf(ctx, ticker)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// InterestRepository_GetRecordsForTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordsForTicker'
type InterestRepository_GetRecordsForTicker_Call struct {
	*mock.Call
}

// GetRecordsForTicker is a helper method to define mock.On call
//   - ctx context.Context
//   - ticker string
func (_e *InterestRepository_Expecter) GetRecordsForTicker(ctx interface{}, ticker interface{}) *InterestRepository_GetRecordsForTicker_Call {
	return &InterestRepository_GetRecordsForTicker_Call{Call: _e.mock.On("GetRecordsForTicker", ctx, ticker)}
}

func (_c *InterestRepository_GetRecordsForTicker_Call) Run(run func(ctx context.Context, ticker string)) *InterestRepository_GetRecordsForTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *InterestRepository_GetRecordsForTicker_Call) Return(_a0 []tax.Interest, _a1 common.HttpError) *InterestRepository_GetRecordsForTicker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InterestRepository_GetRecordsForTicker_Call) RunAndReturn(run func(context.Context, string) ([]tax.Interest, common.HttpError)) *InterestRepository_GetRecordsForTicker_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueTickers provides a mock function with given fields: ctx
func (_m *InterestRepository) GetUniqueTickers(ctx context.Context) ([]string, common.HttpError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueTickers")
	}

	var r0 []string
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, common.HttpError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) common.HttpError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// InterestRepository_GetUniqueTickers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueTickers'
type InterestRepository_GetUniqueTickers_Call struct {
	*mock.Call
}

// GetUniqueTickers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *InterestRepository_Expecter) GetUniqueTickers(ctx interface{}) *InterestRepository_GetUniqueTickers_Call {
	return &InterestRepository_GetUniqueTickers_Call{Call: _e.mock.On("GetUniqueTickers", ctx)}
}

func (_c *InterestRepository_GetUniqueTickers_Call) Run(run func(ctx context.Context)) *InterestRepository_GetUniqueTickers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *InterestRepository_GetUniqueTickers_Call) Return(_a0 []string, _a1 common.HttpError) *InterestRepository_GetUniqueTickers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InterestRepository_GetUniqueTickers_Call) RunAndReturn(run func(context.Context) ([]string, common.HttpError)) *InterestRepository_GetUniqueTickers_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterestRepository creates a new instance of InterestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterestRepository {
	mock := &InterestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
