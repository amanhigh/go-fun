// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/amanhigh/go-fun/models/common"
	mock "github.com/stretchr/testify/mock"
)

// NewSBIManager creates a new instance of SBIManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSBIManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SBIManager {
	mock := &SBIManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SBIManager is an autogenerated mock type for the SBIManager type
type SBIManager struct {
	mock.Mock
}

type SBIManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SBIManager) EXPECT() *SBIManager_Expecter {
	return &SBIManager_Expecter{mock: &_m.Mock}
}

// DownloadRates provides a mock function for the type SBIManager
func (_mock *SBIManager) DownloadRates(ctx context.Context) common.HttpError {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DownloadRates")
	}

	var r0 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context) common.HttpError); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.HttpError)
		}
	}
	return r0
}

// SBIManager_DownloadRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadRates'
type SBIManager_DownloadRates_Call struct {
	*mock.Call
}

// DownloadRates is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SBIManager_Expecter) DownloadRates(ctx interface{}) *SBIManager_DownloadRates_Call {
	return &SBIManager_DownloadRates_Call{Call: _e.mock.On("DownloadRates", ctx)}
}

func (_c *SBIManager_DownloadRates_Call) Run(run func(ctx context.Context)) *SBIManager_DownloadRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SBIManager_DownloadRates_Call) Return(httpError common.HttpError) *SBIManager_DownloadRates_Call {
	_c.Call.Return(httpError)
	return _c
}

func (_c *SBIManager_DownloadRates_Call) RunAndReturn(run func(ctx context.Context) common.HttpError) *SBIManager_DownloadRates_Call {
	_c.Call.Return(run)
	return _c
}

// GetTTBuyRate provides a mock function for the type SBIManager
func (_mock *SBIManager) GetTTBuyRate(ctx context.Context, date time.Time) (float64, common.HttpError) {
	ret := _mock.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetTTBuyRate")
	}

	var r0 float64
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) (float64, common.HttpError)); ok {
		return returnFunc(ctx, date)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) float64); ok {
		r0 = returnFunc(ctx, date)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) common.HttpError); ok {
		r1 = returnFunc(ctx, date)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// SBIManager_GetTTBuyRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTTBuyRate'
type SBIManager_GetTTBuyRate_Call struct {
	*mock.Call
}

// GetTTBuyRate is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *SBIManager_Expecter) GetTTBuyRate(ctx interface{}, date interface{}) *SBIManager_GetTTBuyRate_Call {
	return &SBIManager_GetTTBuyRate_Call{Call: _e.mock.On("GetTTBuyRate", ctx, date)}
}

func (_c *SBIManager_GetTTBuyRate_Call) Run(run func(ctx context.Context, date time.Time)) *SBIManager_GetTTBuyRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SBIManager_GetTTBuyRate_Call) Return(f float64, httpError common.HttpError) *SBIManager_GetTTBuyRate_Call {
	_c.Call.Return(f, httpError)
	return _c
}

func (_c *SBIManager_GetTTBuyRate_Call) RunAndReturn(run func(ctx context.Context, date time.Time) (float64, common.HttpError)) *SBIManager_GetTTBuyRate_Call {
	_c.Call.Return(run)
	return _c
}
