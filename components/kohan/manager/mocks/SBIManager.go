// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/amanhigh/go-fun/models/common"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SBIManager is an autogenerated mock type for the SBIManager type
type SBIManager struct {
	mock.Mock
}

type SBIManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SBIManager) EXPECT() *SBIManager_Expecter {
	return &SBIManager_Expecter{mock: &_m.Mock}
}

// DownloadRates provides a mock function with given fields: ctx
func (_m *SBIManager) DownloadRates(ctx context.Context) common.HttpError {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DownloadRates")
	}

	var r0 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context) common.HttpError); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.HttpError)
		}
	}

	return r0
}

// SBIManager_DownloadRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadRates'
type SBIManager_DownloadRates_Call struct {
	*mock.Call
}

// DownloadRates is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SBIManager_Expecter) DownloadRates(ctx interface{}) *SBIManager_DownloadRates_Call {
	return &SBIManager_DownloadRates_Call{Call: _e.mock.On("DownloadRates", ctx)}
}

func (_c *SBIManager_DownloadRates_Call) Run(run func(ctx context.Context)) *SBIManager_DownloadRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SBIManager_DownloadRates_Call) Return(_a0 common.HttpError) *SBIManager_DownloadRates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SBIManager_DownloadRates_Call) RunAndReturn(run func(context.Context) common.HttpError) *SBIManager_DownloadRates_Call {
	_c.Call.Return(run)
	return _c
}

// GetTTBuyRate provides a mock function with given fields: date
func (_m *SBIManager) GetTTBuyRate(date time.Time) (float64, common.HttpError) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for GetTTBuyRate")
	}

	var r0 float64
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(time.Time) (float64, common.HttpError)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(time.Time) float64); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(time.Time) common.HttpError); ok {
		r1 = rf(date)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// SBIManager_GetTTBuyRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTTBuyRate'
type SBIManager_GetTTBuyRate_Call struct {
	*mock.Call
}

// GetTTBuyRate is a helper method to define mock.On call
//   - date time.Time
func (_e *SBIManager_Expecter) GetTTBuyRate(date interface{}) *SBIManager_GetTTBuyRate_Call {
	return &SBIManager_GetTTBuyRate_Call{Call: _e.mock.On("GetTTBuyRate", date)}
}

func (_c *SBIManager_GetTTBuyRate_Call) Run(run func(date time.Time)) *SBIManager_GetTTBuyRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *SBIManager_GetTTBuyRate_Call) Return(_a0 float64, _a1 common.HttpError) *SBIManager_GetTTBuyRate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SBIManager_GetTTBuyRate_Call) RunAndReturn(run func(time.Time) (float64, common.HttpError)) *SBIManager_GetTTBuyRate_Call {
	_c.Call.Return(run)
	return _c
}

// NewSBIManager creates a new instance of SBIManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSBIManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SBIManager {
	mock := &SBIManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
