// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/common"
	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewTaxManager creates a new instance of TaxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaxManager {
	mock := &TaxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaxManager is an autogenerated mock type for the TaxManager type
type TaxManager struct {
	mock.Mock
}

type TaxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TaxManager) EXPECT() *TaxManager_Expecter {
	return &TaxManager_Expecter{mock: &_m.Mock}
}

// GetTaxSummary provides a mock function for the type TaxManager
func (_mock *TaxManager) GetTaxSummary(ctx context.Context, year int) (tax.Summary, common.HttpError) {
	ret := _mock.Called(ctx, year)

	if len(ret) == 0 {
		panic("no return value specified for GetTaxSummary")
	}

	var r0 tax.Summary
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (tax.Summary, common.HttpError)); ok {
		return returnFunc(ctx, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) tax.Summary); ok {
		r0 = returnFunc(ctx, year)
	} else {
		r0 = ret.Get(0).(tax.Summary)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) common.HttpError); ok {
		r1 = returnFunc(ctx, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// TaxManager_GetTaxSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaxSummary'
type TaxManager_GetTaxSummary_Call struct {
	*mock.Call
}

// GetTaxSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
func (_e *TaxManager_Expecter) GetTaxSummary(ctx interface{}, year interface{}) *TaxManager_GetTaxSummary_Call {
	return &TaxManager_GetTaxSummary_Call{Call: _e.mock.On("GetTaxSummary", ctx, year)}
}

func (_c *TaxManager_GetTaxSummary_Call) Run(run func(ctx context.Context, year int)) *TaxManager_GetTaxSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaxManager_GetTaxSummary_Call) Return(summary tax.Summary, httpError common.HttpError) *TaxManager_GetTaxSummary_Call {
	_c.Call.Return(summary, httpError)
	return _c
}

func (_c *TaxManager_GetTaxSummary_Call) RunAndReturn(run func(ctx context.Context, year int) (tax.Summary, common.HttpError)) *TaxManager_GetTaxSummary_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTaxSummaryToExcel provides a mock function for the type TaxManager
func (_mock *TaxManager) SaveTaxSummaryToExcel(ctx context.Context, summary tax.Summary) error {
	ret := _mock.Called(ctx, summary)

	if len(ret) == 0 {
		panic("no return value specified for SaveTaxSummaryToExcel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, tax.Summary) error); ok {
		r0 = returnFunc(ctx, summary)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaxManager_SaveTaxSummaryToExcel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTaxSummaryToExcel'
type TaxManager_SaveTaxSummaryToExcel_Call struct {
	*mock.Call
}

// SaveTaxSummaryToExcel is a helper method to define mock.On call
//   - ctx context.Context
//   - summary tax.Summary
func (_e *TaxManager_Expecter) SaveTaxSummaryToExcel(ctx interface{}, summary interface{}) *TaxManager_SaveTaxSummaryToExcel_Call {
	return &TaxManager_SaveTaxSummaryToExcel_Call{Call: _e.mock.On("SaveTaxSummaryToExcel", ctx, summary)}
}

func (_c *TaxManager_SaveTaxSummaryToExcel_Call) Run(run func(ctx context.Context, summary tax.Summary)) *TaxManager_SaveTaxSummaryToExcel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 tax.Summary
		if args[1] != nil {
			arg1 = args[1].(tax.Summary)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaxManager_SaveTaxSummaryToExcel_Call) Return(err error) *TaxManager_SaveTaxSummaryToExcel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaxManager_SaveTaxSummaryToExcel_Call) RunAndReturn(run func(ctx context.Context, summary tax.Summary) error) *TaxManager_SaveTaxSummaryToExcel_Call {
	_c.Call.Return(run)
	return _c
}
