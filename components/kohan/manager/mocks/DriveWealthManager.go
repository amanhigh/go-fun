// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tax "github.com/amanhigh/go-fun/models/tax"
)

// DriveWealthManager is an autogenerated mock type for the DriveWealthManager type
type DriveWealthManager struct {
	mock.Mock
}

type DriveWealthManager_Expecter struct {
	mock *mock.Mock
}

func (_m *DriveWealthManager) EXPECT() *DriveWealthManager_Expecter {
	return &DriveWealthManager_Expecter{mock: &_m.Mock}
}

// GenerateCsv provides a mock function with given fields: ctx, info
func (_m *DriveWealthManager) GenerateCsv(ctx context.Context, info tax.DriveWealthInfo) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for GenerateCsv")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tax.DriveWealthInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DriveWealthManager_GenerateCsv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCsv'
type DriveWealthManager_GenerateCsv_Call struct {
	*mock.Call
}

// GenerateCsv is a helper method to define mock.On call
//   - ctx context.Context
//   - info tax.DriveWealthInfo
func (_e *DriveWealthManager_Expecter) GenerateCsv(ctx interface{}, info interface{}) *DriveWealthManager_GenerateCsv_Call {
	return &DriveWealthManager_GenerateCsv_Call{Call: _e.mock.On("GenerateCsv", ctx, info)}
}

func (_c *DriveWealthManager_GenerateCsv_Call) Run(run func(ctx context.Context, info tax.DriveWealthInfo)) *DriveWealthManager_GenerateCsv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tax.DriveWealthInfo))
	})
	return _c
}

func (_c *DriveWealthManager_GenerateCsv_Call) Return(err error) *DriveWealthManager_GenerateCsv_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DriveWealthManager_GenerateCsv_Call) RunAndReturn(run func(context.Context, tax.DriveWealthInfo) error) *DriveWealthManager_GenerateCsv_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function with no fields
func (_m *DriveWealthManager) Parse() (tax.DriveWealthInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 tax.DriveWealthInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (tax.DriveWealthInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() tax.DriveWealthInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(tax.DriveWealthInfo)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DriveWealthManager_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type DriveWealthManager_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
func (_e *DriveWealthManager_Expecter) Parse() *DriveWealthManager_Parse_Call {
	return &DriveWealthManager_Parse_Call{Call: _e.mock.On("Parse")}
}

func (_c *DriveWealthManager_Parse_Call) Run(run func()) *DriveWealthManager_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DriveWealthManager_Parse_Call) Return(info tax.DriveWealthInfo, err error) *DriveWealthManager_Parse_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *DriveWealthManager_Parse_Call) RunAndReturn(run func() (tax.DriveWealthInfo, error)) *DriveWealthManager_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewDriveWealthManager creates a new instance of DriveWealthManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriveWealthManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *DriveWealthManager {
	mock := &DriveWealthManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
