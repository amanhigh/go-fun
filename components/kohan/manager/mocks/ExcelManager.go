// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewExcelManager creates a new instance of ExcelManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExcelManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExcelManager {
	mock := &ExcelManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExcelManager is an autogenerated mock type for the ExcelManager type
type ExcelManager struct {
	mock.Mock
}

type ExcelManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ExcelManager) EXPECT() *ExcelManager_Expecter {
	return &ExcelManager_Expecter{mock: &_m.Mock}
}

// GenerateTaxSummaryExcel provides a mock function for the type ExcelManager
func (_mock *ExcelManager) GenerateTaxSummaryExcel(ctx context.Context, summary tax.Summary) error {
	ret := _mock.Called(ctx, summary)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTaxSummaryExcel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, tax.Summary) error); ok {
		r0 = returnFunc(ctx, summary)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExcelManager_GenerateTaxSummaryExcel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTaxSummaryExcel'
type ExcelManager_GenerateTaxSummaryExcel_Call struct {
	*mock.Call
}

// GenerateTaxSummaryExcel is a helper method to define mock.On call
//   - ctx context.Context
//   - summary tax.Summary
func (_e *ExcelManager_Expecter) GenerateTaxSummaryExcel(ctx interface{}, summary interface{}) *ExcelManager_GenerateTaxSummaryExcel_Call {
	return &ExcelManager_GenerateTaxSummaryExcel_Call{Call: _e.mock.On("GenerateTaxSummaryExcel", ctx, summary)}
}

func (_c *ExcelManager_GenerateTaxSummaryExcel_Call) Run(run func(ctx context.Context, summary tax.Summary)) *ExcelManager_GenerateTaxSummaryExcel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 tax.Summary
		if args[1] != nil {
			arg1 = args[1].(tax.Summary)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ExcelManager_GenerateTaxSummaryExcel_Call) Return(err error) *ExcelManager_GenerateTaxSummaryExcel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExcelManager_GenerateTaxSummaryExcel_Call) RunAndReturn(run func(ctx context.Context, summary tax.Summary) error) *ExcelManager_GenerateTaxSummaryExcel_Call {
	_c.Call.Return(run)
	return _c
}
