// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/common"
	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewInterestManager creates a new instance of InterestManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterestManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterestManager {
	mock := &InterestManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// InterestManager is an autogenerated mock type for the InterestManager type
type InterestManager struct {
	mock.Mock
}

type InterestManager_Expecter struct {
	mock *mock.Mock
}

func (_m *InterestManager) EXPECT() *InterestManager_Expecter {
	return &InterestManager_Expecter{mock: &_m.Mock}
}

// GetInterestForYear provides a mock function for the type InterestManager
func (_mock *InterestManager) GetInterestForYear(ctx context.Context, year int) ([]tax.Interest, common.HttpError) {
	ret := _mock.Called(ctx, year)

	if len(ret) == 0 {
		panic("no return value specified for GetInterestForYear")
	}

	var r0 []tax.Interest
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tax.Interest, common.HttpError)); ok {
		return returnFunc(ctx, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tax.Interest); ok {
		r0 = returnFunc(ctx, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Interest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) common.HttpError); ok {
		r1 = returnFunc(ctx, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// InterestManager_GetInterestForYear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInterestForYear'
type InterestManager_GetInterestForYear_Call struct {
	*mock.Call
}

// GetInterestForYear is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
func (_e *InterestManager_Expecter) GetInterestForYear(ctx interface{}, year interface{}) *InterestManager_GetInterestForYear_Call {
	return &InterestManager_GetInterestForYear_Call{Call: _e.mock.On("GetInterestForYear", ctx, year)}
}

func (_c *InterestManager_GetInterestForYear_Call) Run(run func(ctx context.Context, year int)) *InterestManager_GetInterestForYear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *InterestManager_GetInterestForYear_Call) Return(interests []tax.Interest, httpError common.HttpError) *InterestManager_GetInterestForYear_Call {
	_c.Call.Return(interests, httpError)
	return _c
}

func (_c *InterestManager_GetInterestForYear_Call) RunAndReturn(run func(ctx context.Context, year int) ([]tax.Interest, common.HttpError)) *InterestManager_GetInterestForYear_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessInterest provides a mock function for the type InterestManager
func (_mock *InterestManager) ProcessInterest(ctx context.Context, interest []tax.Interest) ([]tax.INRInterest, common.HttpError) {
	ret := _mock.Called(ctx, interest)

	if len(ret) == 0 {
		panic("no return value specified for ProcessInterest")
	}

	var r0 []tax.INRInterest
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tax.Interest) ([]tax.INRInterest, common.HttpError)); ok {
		return returnFunc(ctx, interest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tax.Interest) []tax.INRInterest); ok {
		r0 = returnFunc(ctx, interest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.INRInterest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []tax.Interest) common.HttpError); ok {
		r1 = returnFunc(ctx, interest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// InterestManager_ProcessInterest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessInterest'
type InterestManager_ProcessInterest_Call struct {
	*mock.Call
}

// ProcessInterest is a helper method to define mock.On call
//   - ctx context.Context
//   - interest []tax.Interest
func (_e *InterestManager_Expecter) ProcessInterest(ctx interface{}, interest interface{}) *InterestManager_ProcessInterest_Call {
	return &InterestManager_ProcessInterest_Call{Call: _e.mock.On("ProcessInterest", ctx, interest)}
}

func (_c *InterestManager_ProcessInterest_Call) Run(run func(ctx context.Context, interest []tax.Interest)) *InterestManager_ProcessInterest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []tax.Interest
		if args[1] != nil {
			arg1 = args[1].([]tax.Interest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *InterestManager_ProcessInterest_Call) Return(iNRInterests []tax.INRInterest, httpError common.HttpError) *InterestManager_ProcessInterest_Call {
	_c.Call.Return(iNRInterests, httpError)
	return _c
}

func (_c *InterestManager_ProcessInterest_Call) RunAndReturn(run func(ctx context.Context, interest []tax.Interest) ([]tax.INRInterest, common.HttpError)) *InterestManager_ProcessInterest_Call {
	_c.Call.Return(run)
	return _c
}
