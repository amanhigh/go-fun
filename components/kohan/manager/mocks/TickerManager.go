// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/amanhigh/go-fun/models/common"

	mock "github.com/stretchr/testify/mock"

	tax "github.com/amanhigh/go-fun/models/tax"

	time "time"
)

// TickerManager is an autogenerated mock type for the TickerManager type
type TickerManager struct {
	mock.Mock
}

type TickerManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TickerManager) EXPECT() *TickerManager_Expecter {
	return &TickerManager_Expecter{mock: &_m.Mock}
}

// DownloadTicker provides a mock function with given fields: ctx, ticker
func (_m *TickerManager) DownloadTicker(ctx context.Context, ticker string) common.HttpError {
	ret := _m.Called(ctx, ticker)

	if len(ret) == 0 {
		panic("no return value specified for DownloadTicker")
	}

	var r0 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, string) common.HttpError); ok {
		r0 = rf(ctx, ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.HttpError)
		}
	}

	return r0
}

// TickerManager_DownloadTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadTicker'
type TickerManager_DownloadTicker_Call struct {
	*mock.Call
}

// DownloadTicker is a helper method to define mock.On call
//   - ctx context.Context
//   - ticker string
func (_e *TickerManager_Expecter) DownloadTicker(ctx interface{}, ticker interface{}) *TickerManager_DownloadTicker_Call {
	return &TickerManager_DownloadTicker_Call{Call: _e.mock.On("DownloadTicker", ctx, ticker)}
}

func (_c *TickerManager_DownloadTicker_Call) Run(run func(ctx context.Context, ticker string)) *TickerManager_DownloadTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TickerManager_DownloadTicker_Call) Return(err common.HttpError) *TickerManager_DownloadTicker_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TickerManager_DownloadTicker_Call) RunAndReturn(run func(context.Context, string) common.HttpError) *TickerManager_DownloadTicker_Call {
	_c.Call.Return(run)
	return _c
}

// FindPeakPrice provides a mock function with given fields: ctx, ticker, year
func (_m *TickerManager) FindPeakPrice(ctx context.Context, ticker string, year int) (tax.PeakPrice, common.HttpError) {
	ret := _m.Called(ctx, ticker, year)

	if len(ret) == 0 {
		panic("no return value specified for FindPeakPrice")
	}

	var r0 tax.PeakPrice
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (tax.PeakPrice, common.HttpError)); ok {
		return rf(ctx, ticker, year)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) tax.PeakPrice); ok {
		r0 = rf(ctx, ticker, year)
	} else {
		r0 = ret.Get(0).(tax.PeakPrice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) common.HttpError); ok {
		r1 = rf(ctx, ticker, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// TickerManager_FindPeakPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPeakPrice'
type TickerManager_FindPeakPrice_Call struct {
	*mock.Call
}

// FindPeakPrice is a helper method to define mock.On call
//   - ctx context.Context
//   - ticker string
//   - year int
func (_e *TickerManager_Expecter) FindPeakPrice(ctx interface{}, ticker interface{}, year interface{}) *TickerManager_FindPeakPrice_Call {
	return &TickerManager_FindPeakPrice_Call{Call: _e.mock.On("FindPeakPrice", ctx, ticker, year)}
}

func (_c *TickerManager_FindPeakPrice_Call) Run(run func(ctx context.Context, ticker string, year int)) *TickerManager_FindPeakPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *TickerManager_FindPeakPrice_Call) Return(_a0 tax.PeakPrice, _a1 common.HttpError) *TickerManager_FindPeakPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TickerManager_FindPeakPrice_Call) RunAndReturn(run func(context.Context, string, int) (tax.PeakPrice, common.HttpError)) *TickerManager_FindPeakPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrice provides a mock function with given fields: ctx, ticker, date
func (_m *TickerManager) GetPrice(ctx context.Context, ticker string, date time.Time) (float64, common.HttpError) {
	ret := _m.Called(ctx, ticker, date)

	if len(ret) == 0 {
		panic("no return value specified for GetPrice")
	}

	var r0 float64
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (float64, common.HttpError)); ok {
		return rf(ctx, ticker, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) float64); ok {
		r0 = rf(ctx, ticker, date)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) common.HttpError); ok {
		r1 = rf(ctx, ticker, date)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// TickerManager_GetPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrice'
type TickerManager_GetPrice_Call struct {
	*mock.Call
}

// GetPrice is a helper method to define mock.On call
//   - ctx context.Context
//   - ticker string
//   - date time.Time
func (_e *TickerManager_Expecter) GetPrice(ctx interface{}, ticker interface{}, date interface{}) *TickerManager_GetPrice_Call {
	return &TickerManager_GetPrice_Call{Call: _e.mock.On("GetPrice", ctx, ticker, date)}
}

func (_c *TickerManager_GetPrice_Call) Run(run func(ctx context.Context, ticker string, date time.Time)) *TickerManager_GetPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *TickerManager_GetPrice_Call) Return(_a0 float64, _a1 common.HttpError) *TickerManager_GetPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TickerManager_GetPrice_Call) RunAndReturn(run func(context.Context, string, time.Time) (float64, common.HttpError)) *TickerManager_GetPrice_Call {
	_c.Call.Return(run)
	return _c
}

// NewTickerManager creates a new instance of TickerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTickerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TickerManager {
	mock := &TickerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
