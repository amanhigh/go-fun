// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/common"
	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewValuationManager creates a new instance of ValuationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValuationManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValuationManager {
	mock := &ValuationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ValuationManager is an autogenerated mock type for the ValuationManager type
type ValuationManager struct {
	mock.Mock
}

type ValuationManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ValuationManager) EXPECT() *ValuationManager_Expecter {
	return &ValuationManager_Expecter{mock: &_m.Mock}
}

// AnalyzeValuation provides a mock function for the type ValuationManager
func (_mock *ValuationManager) AnalyzeValuation(ctx context.Context, tickerSymbol string, trades []tax.Trade, year int) (tax.Valuation, common.HttpError) {
	ret := _mock.Called(ctx, tickerSymbol, trades, year)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeValuation")
	}

	var r0 tax.Valuation
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []tax.Trade, int) (tax.Valuation, common.HttpError)); ok {
		return returnFunc(ctx, tickerSymbol, trades, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []tax.Trade, int) tax.Valuation); ok {
		r0 = returnFunc(ctx, tickerSymbol, trades, year)
	} else {
		r0 = ret.Get(0).(tax.Valuation)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []tax.Trade, int) common.HttpError); ok {
		r1 = returnFunc(ctx, tickerSymbol, trades, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// ValuationManager_AnalyzeValuation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnalyzeValuation'
type ValuationManager_AnalyzeValuation_Call struct {
	*mock.Call
}

// AnalyzeValuation is a helper method to define mock.On call
//   - ctx context.Context
//   - tickerSymbol string
//   - trades []tax.Trade
//   - year int
func (_e *ValuationManager_Expecter) AnalyzeValuation(ctx interface{}, tickerSymbol interface{}, trades interface{}, year interface{}) *ValuationManager_AnalyzeValuation_Call {
	return &ValuationManager_AnalyzeValuation_Call{Call: _e.mock.On("AnalyzeValuation", ctx, tickerSymbol, trades, year)}
}

func (_c *ValuationManager_AnalyzeValuation_Call) Run(run func(ctx context.Context, tickerSymbol string, trades []tax.Trade, year int)) *ValuationManager_AnalyzeValuation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []tax.Trade
		if args[2] != nil {
			arg2 = args[2].([]tax.Trade)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *ValuationManager_AnalyzeValuation_Call) Return(valuation tax.Valuation, httpError common.HttpError) *ValuationManager_AnalyzeValuation_Call {
	_c.Call.Return(valuation, httpError)
	return _c
}

func (_c *ValuationManager_AnalyzeValuation_Call) RunAndReturn(run func(ctx context.Context, tickerSymbol string, trades []tax.Trade, year int) (tax.Valuation, common.HttpError)) *ValuationManager_AnalyzeValuation_Call {
	_c.Call.Return(run)
	return _c
}

// GetYearlyValuationsUSD provides a mock function for the type ValuationManager
func (_mock *ValuationManager) GetYearlyValuationsUSD(ctx context.Context, year int) ([]tax.Valuation, common.HttpError) {
	ret := _mock.Called(ctx, year)

	if len(ret) == 0 {
		panic("no return value specified for GetYearlyValuationsUSD")
	}

	var r0 []tax.Valuation
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tax.Valuation, common.HttpError)); ok {
		return returnFunc(ctx, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tax.Valuation); ok {
		r0 = returnFunc(ctx, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Valuation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) common.HttpError); ok {
		r1 = returnFunc(ctx, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// ValuationManager_GetYearlyValuationsUSD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetYearlyValuationsUSD'
type ValuationManager_GetYearlyValuationsUSD_Call struct {
	*mock.Call
}

// GetYearlyValuationsUSD is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
func (_e *ValuationManager_Expecter) GetYearlyValuationsUSD(ctx interface{}, year interface{}) *ValuationManager_GetYearlyValuationsUSD_Call {
	return &ValuationManager_GetYearlyValuationsUSD_Call{Call: _e.mock.On("GetYearlyValuationsUSD", ctx, year)}
}

func (_c *ValuationManager_GetYearlyValuationsUSD_Call) Run(run func(ctx context.Context, year int)) *ValuationManager_GetYearlyValuationsUSD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ValuationManager_GetYearlyValuationsUSD_Call) Return(valuations []tax.Valuation, httpError common.HttpError) *ValuationManager_GetYearlyValuationsUSD_Call {
	_c.Call.Return(valuations, httpError)
	return _c
}

func (_c *ValuationManager_GetYearlyValuationsUSD_Call) RunAndReturn(run func(ctx context.Context, year int) ([]tax.Valuation, common.HttpError)) *ValuationManager_GetYearlyValuationsUSD_Call {
	_c.Call.Return(run)
	return _c
}
