// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AutoManagerInterface is an autogenerated mock type for the AutoManagerInterface type
type AutoManagerInterface struct {
	mock.Mock
}

type AutoManagerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AutoManagerInterface) EXPECT() *AutoManagerInterface_Expecter {
	return &AutoManagerInterface_Expecter{mock: &_m.Mock}
}

// MonitorInternetConnection provides a mock function with given fields: ctx
func (_m *AutoManagerInterface) MonitorInternetConnection(ctx context.Context) {
	_m.Called(ctx)
}

// AutoManagerInterface_MonitorInternetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonitorInternetConnection'
type AutoManagerInterface_MonitorInternetConnection_Call struct {
	*mock.Call
}

// MonitorInternetConnection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AutoManagerInterface_Expecter) MonitorInternetConnection(ctx interface{}) *AutoManagerInterface_MonitorInternetConnection_Call {
	return &AutoManagerInterface_MonitorInternetConnection_Call{Call: _e.mock.On("MonitorInternetConnection", ctx)}
}

func (_c *AutoManagerInterface_MonitorInternetConnection_Call) Run(run func(ctx context.Context)) *AutoManagerInterface_MonitorInternetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AutoManagerInterface_MonitorInternetConnection_Call) Return() *AutoManagerInterface_MonitorInternetConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *AutoManagerInterface_MonitorInternetConnection_Call) RunAndReturn(run func(context.Context)) *AutoManagerInterface_MonitorInternetConnection_Call {
	_c.Run(run)
	return _c
}

// RecordTicker provides a mock function with given fields: ctx, ticker, path
func (_m *AutoManagerInterface) RecordTicker(ctx context.Context, ticker string, path string) error {
	ret := _m.Called(ctx, ticker, path)

	if len(ret) == 0 {
		panic("no return value specified for RecordTicker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, ticker, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoManagerInterface_RecordTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordTicker'
type AutoManagerInterface_RecordTicker_Call struct {
	*mock.Call
}

// RecordTicker is a helper method to define mock.On call
//   - ctx context.Context
//   - ticker string
//   - path string
func (_e *AutoManagerInterface_Expecter) RecordTicker(ctx interface{}, ticker interface{}, path interface{}) *AutoManagerInterface_RecordTicker_Call {
	return &AutoManagerInterface_RecordTicker_Call{Call: _e.mock.On("RecordTicker", ctx, ticker, path)}
}

func (_c *AutoManagerInterface_RecordTicker_Call) Run(run func(ctx context.Context, ticker string, path string)) *AutoManagerInterface_RecordTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AutoManagerInterface_RecordTicker_Call) Return(_a0 error) *AutoManagerInterface_RecordTicker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AutoManagerInterface_RecordTicker_Call) RunAndReturn(run func(context.Context, string, string) error) *AutoManagerInterface_RecordTicker_Call {
	_c.Call.Return(run)
	return _c
}

// TryOpenTicker provides a mock function with given fields: ctx, ticker
func (_m *AutoManagerInterface) TryOpenTicker(ctx context.Context, ticker string) {
	_m.Called(ctx, ticker)
}

// AutoManagerInterface_TryOpenTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryOpenTicker'
type AutoManagerInterface_TryOpenTicker_Call struct {
	*mock.Call
}

// TryOpenTicker is a helper method to define mock.On call
//   - ctx context.Context
//   - ticker string
func (_e *AutoManagerInterface_Expecter) TryOpenTicker(ctx interface{}, ticker interface{}) *AutoManagerInterface_TryOpenTicker_Call {
	return &AutoManagerInterface_TryOpenTicker_Call{Call: _e.mock.On("TryOpenTicker", ctx, ticker)}
}

func (_c *AutoManagerInterface_TryOpenTicker_Call) Run(run func(ctx context.Context, ticker string)) *AutoManagerInterface_TryOpenTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AutoManagerInterface_TryOpenTicker_Call) Return() *AutoManagerInterface_TryOpenTicker_Call {
	_c.Call.Return()
	return _c
}

func (_c *AutoManagerInterface_TryOpenTicker_Call) RunAndReturn(run func(context.Context, string)) *AutoManagerInterface_TryOpenTicker_Call {
	_c.Run(run)
	return _c
}

// NewAutoManagerInterface creates a new instance of AutoManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAutoManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AutoManagerInterface {
	mock := &AutoManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
