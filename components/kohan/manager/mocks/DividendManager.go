// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/common"
	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewDividendManager creates a new instance of DividendManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDividendManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *DividendManager {
	mock := &DividendManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DividendManager is an autogenerated mock type for the DividendManager type
type DividendManager struct {
	mock.Mock
}

type DividendManager_Expecter struct {
	mock *mock.Mock
}

func (_m *DividendManager) EXPECT() *DividendManager_Expecter {
	return &DividendManager_Expecter{mock: &_m.Mock}
}

// GetDividendsForYear provides a mock function for the type DividendManager
func (_mock *DividendManager) GetDividendsForYear(ctx context.Context, year int) ([]tax.Dividend, common.HttpError) {
	ret := _mock.Called(ctx, year)

	if len(ret) == 0 {
		panic("no return value specified for GetDividendsForYear")
	}

	var r0 []tax.Dividend
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tax.Dividend, common.HttpError)); ok {
		return returnFunc(ctx, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tax.Dividend); ok {
		r0 = returnFunc(ctx, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Dividend)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) common.HttpError); ok {
		r1 = returnFunc(ctx, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// DividendManager_GetDividendsForYear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDividendsForYear'
type DividendManager_GetDividendsForYear_Call struct {
	*mock.Call
}

// GetDividendsForYear is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
func (_e *DividendManager_Expecter) GetDividendsForYear(ctx interface{}, year interface{}) *DividendManager_GetDividendsForYear_Call {
	return &DividendManager_GetDividendsForYear_Call{Call: _e.mock.On("GetDividendsForYear", ctx, year)}
}

func (_c *DividendManager_GetDividendsForYear_Call) Run(run func(ctx context.Context, year int)) *DividendManager_GetDividendsForYear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DividendManager_GetDividendsForYear_Call) Return(dividends []tax.Dividend, httpError common.HttpError) *DividendManager_GetDividendsForYear_Call {
	_c.Call.Return(dividends, httpError)
	return _c
}

func (_c *DividendManager_GetDividendsForYear_Call) RunAndReturn(run func(ctx context.Context, year int) ([]tax.Dividend, common.HttpError)) *DividendManager_GetDividendsForYear_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessDividends provides a mock function for the type DividendManager
func (_mock *DividendManager) ProcessDividends(ctx context.Context, dividends []tax.Dividend) ([]tax.INRDividend, common.HttpError) {
	ret := _mock.Called(ctx, dividends)

	if len(ret) == 0 {
		panic("no return value specified for ProcessDividends")
	}

	var r0 []tax.INRDividend
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tax.Dividend) ([]tax.INRDividend, common.HttpError)); ok {
		return returnFunc(ctx, dividends)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tax.Dividend) []tax.INRDividend); ok {
		r0 = returnFunc(ctx, dividends)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.INRDividend)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []tax.Dividend) common.HttpError); ok {
		r1 = returnFunc(ctx, dividends)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// DividendManager_ProcessDividends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessDividends'
type DividendManager_ProcessDividends_Call struct {
	*mock.Call
}

// ProcessDividends is a helper method to define mock.On call
//   - ctx context.Context
//   - dividends []tax.Dividend
func (_e *DividendManager_Expecter) ProcessDividends(ctx interface{}, dividends interface{}) *DividendManager_ProcessDividends_Call {
	return &DividendManager_ProcessDividends_Call{Call: _e.mock.On("ProcessDividends", ctx, dividends)}
}

func (_c *DividendManager_ProcessDividends_Call) Run(run func(ctx context.Context, dividends []tax.Dividend)) *DividendManager_ProcessDividends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []tax.Dividend
		if args[1] != nil {
			arg1 = args[1].([]tax.Dividend)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DividendManager_ProcessDividends_Call) Return(iNRDividends []tax.INRDividend, httpError common.HttpError) *DividendManager_ProcessDividends_Call {
	_c.Call.Return(iNRDividends, httpError)
	return _c
}

func (_c *DividendManager_ProcessDividends_Call) RunAndReturn(run func(ctx context.Context, dividends []tax.Dividend) ([]tax.INRDividend, common.HttpError)) *DividendManager_ProcessDividends_Call {
	_c.Call.Return(run)
	return _c
}
