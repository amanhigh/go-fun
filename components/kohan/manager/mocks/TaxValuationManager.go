// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/common"
	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewTaxValuationManager creates a new instance of TaxValuationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaxValuationManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaxValuationManager {
	mock := &TaxValuationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaxValuationManager is an autogenerated mock type for the TaxValuationManager type
type TaxValuationManager struct {
	mock.Mock
}

type TaxValuationManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TaxValuationManager) EXPECT() *TaxValuationManager_Expecter {
	return &TaxValuationManager_Expecter{mock: &_m.Mock}
}

// GetYearlyValuationsUSD provides a mock function for the type TaxValuationManager
func (_mock *TaxValuationManager) GetYearlyValuationsUSD(ctx context.Context, year int) ([]tax.Valuation, common.HttpError) {
	ret := _mock.Called(ctx, year)

	if len(ret) == 0 {
		panic("no return value specified for GetYearlyValuationsUSD")
	}

	var r0 []tax.Valuation
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tax.Valuation, common.HttpError)); ok {
		return returnFunc(ctx, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tax.Valuation); ok {
		r0 = returnFunc(ctx, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Valuation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) common.HttpError); ok {
		r1 = returnFunc(ctx, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// TaxValuationManager_GetYearlyValuationsUSD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetYearlyValuationsUSD'
type TaxValuationManager_GetYearlyValuationsUSD_Call struct {
	*mock.Call
}

// GetYearlyValuationsUSD is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
func (_e *TaxValuationManager_Expecter) GetYearlyValuationsUSD(ctx interface{}, year interface{}) *TaxValuationManager_GetYearlyValuationsUSD_Call {
	return &TaxValuationManager_GetYearlyValuationsUSD_Call{Call: _e.mock.On("GetYearlyValuationsUSD", ctx, year)}
}

func (_c *TaxValuationManager_GetYearlyValuationsUSD_Call) Run(run func(ctx context.Context, year int)) *TaxValuationManager_GetYearlyValuationsUSD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaxValuationManager_GetYearlyValuationsUSD_Call) Return(valuations []tax.Valuation, httpError common.HttpError) *TaxValuationManager_GetYearlyValuationsUSD_Call {
	_c.Call.Return(valuations, httpError)
	return _c
}

func (_c *TaxValuationManager_GetYearlyValuationsUSD_Call) RunAndReturn(run func(ctx context.Context, year int) ([]tax.Valuation, common.HttpError)) *TaxValuationManager_GetYearlyValuationsUSD_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessValuations provides a mock function for the type TaxValuationManager
func (_mock *TaxValuationManager) ProcessValuations(ctx context.Context, valuations []tax.Valuation) ([]tax.INRValuation, common.HttpError) {
	ret := _mock.Called(ctx, valuations)

	if len(ret) == 0 {
		panic("no return value specified for ProcessValuations")
	}

	var r0 []tax.INRValuation
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tax.Valuation) ([]tax.INRValuation, common.HttpError)); ok {
		return returnFunc(ctx, valuations)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tax.Valuation) []tax.INRValuation); ok {
		r0 = returnFunc(ctx, valuations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.INRValuation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []tax.Valuation) common.HttpError); ok {
		r1 = returnFunc(ctx, valuations)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// TaxValuationManager_ProcessValuations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessValuations'
type TaxValuationManager_ProcessValuations_Call struct {
	*mock.Call
}

// ProcessValuations is a helper method to define mock.On call
//   - ctx context.Context
//   - valuations []tax.Valuation
func (_e *TaxValuationManager_Expecter) ProcessValuations(ctx interface{}, valuations interface{}) *TaxValuationManager_ProcessValuations_Call {
	return &TaxValuationManager_ProcessValuations_Call{Call: _e.mock.On("ProcessValuations", ctx, valuations)}
}

func (_c *TaxValuationManager_ProcessValuations_Call) Run(run func(ctx context.Context, valuations []tax.Valuation)) *TaxValuationManager_ProcessValuations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []tax.Valuation
		if args[1] != nil {
			arg1 = args[1].([]tax.Valuation)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaxValuationManager_ProcessValuations_Call) Return(iNRValuations []tax.INRValuation, httpError common.HttpError) *TaxValuationManager_ProcessValuations_Call {
	_c.Call.Return(iNRValuations, httpError)
	return _c
}

func (_c *TaxValuationManager_ProcessValuations_Call) RunAndReturn(run func(ctx context.Context, valuations []tax.Valuation) ([]tax.INRValuation, common.HttpError)) *TaxValuationManager_ProcessValuations_Call {
	_c.Call.Return(run)
	return _c
}
