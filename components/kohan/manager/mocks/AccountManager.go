// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/common"
	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewAccountManager creates a new instance of AccountManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountManager {
	mock := &AccountManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AccountManager is an autogenerated mock type for the AccountManager type
type AccountManager struct {
	mock.Mock
}

type AccountManager_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountManager) EXPECT() *AccountManager_Expecter {
	return &AccountManager_Expecter{mock: &_m.Mock}
}

// GenerateYearEndAccounts provides a mock function for the type AccountManager
func (_mock *AccountManager) GenerateYearEndAccounts(ctx context.Context, year int, valuations []tax.Valuation) common.HttpError {
	ret := _mock.Called(ctx, year, valuations)

	if len(ret) == 0 {
		panic("no return value specified for GenerateYearEndAccounts")
	}

	var r0 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, []tax.Valuation) common.HttpError); ok {
		r0 = returnFunc(ctx, year, valuations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.HttpError)
		}
	}
	return r0
}

// AccountManager_GenerateYearEndAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateYearEndAccounts'
type AccountManager_GenerateYearEndAccounts_Call struct {
	*mock.Call
}

// GenerateYearEndAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
//   - valuations []tax.Valuation
func (_e *AccountManager_Expecter) GenerateYearEndAccounts(ctx interface{}, year interface{}, valuations interface{}) *AccountManager_GenerateYearEndAccounts_Call {
	return &AccountManager_GenerateYearEndAccounts_Call{Call: _e.mock.On("GenerateYearEndAccounts", ctx, year, valuations)}
}

func (_c *AccountManager_GenerateYearEndAccounts_Call) Run(run func(ctx context.Context, year int, valuations []tax.Valuation)) *AccountManager_GenerateYearEndAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []tax.Valuation
		if args[2] != nil {
			arg2 = args[2].([]tax.Valuation)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccountManager_GenerateYearEndAccounts_Call) Return(httpError common.HttpError) *AccountManager_GenerateYearEndAccounts_Call {
	_c.Call.Return(httpError)
	return _c
}

func (_c *AccountManager_GenerateYearEndAccounts_Call) RunAndReturn(run func(ctx context.Context, year int, valuations []tax.Valuation) common.HttpError) *AccountManager_GenerateYearEndAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecord provides a mock function for the type AccountManager
func (_mock *AccountManager) GetRecord(ctx context.Context, symbol string, year int) (tax.Account, common.HttpError) {
	ret := _mock.Called(ctx, symbol, year)

	if len(ret) == 0 {
		panic("no return value specified for GetRecord")
	}

	var r0 tax.Account
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) (tax.Account, common.HttpError)); ok {
		return returnFunc(ctx, symbol, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) tax.Account); ok {
		r0 = returnFunc(ctx, symbol, year)
	} else {
		r0 = ret.Get(0).(tax.Account)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int) common.HttpError); ok {
		r1 = returnFunc(ctx, symbol, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// AccountManager_GetRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecord'
type AccountManager_GetRecord_Call struct {
	*mock.Call
}

// GetRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol string
//   - year int
func (_e *AccountManager_Expecter) GetRecord(ctx interface{}, symbol interface{}, year interface{}) *AccountManager_GetRecord_Call {
	return &AccountManager_GetRecord_Call{Call: _e.mock.On("GetRecord", ctx, symbol, year)}
}

func (_c *AccountManager_GetRecord_Call) Run(run func(ctx context.Context, symbol string, year int)) *AccountManager_GetRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccountManager_GetRecord_Call) Return(account tax.Account, httpError common.HttpError) *AccountManager_GetRecord_Call {
	_c.Call.Return(account, httpError)
	return _c
}

func (_c *AccountManager_GetRecord_Call) RunAndReturn(run func(ctx context.Context, symbol string, year int) (tax.Account, common.HttpError)) *AccountManager_GetRecord_Call {
	_c.Call.Return(run)
	return _c
}
