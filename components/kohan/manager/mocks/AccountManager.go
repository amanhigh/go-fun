// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/amanhigh/go-fun/models/common"

	mock "github.com/stretchr/testify/mock"

	tax "github.com/amanhigh/go-fun/models/tax"
)

// AccountManager is an autogenerated mock type for the AccountManager type
type AccountManager struct {
	mock.Mock
}

type AccountManager_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountManager) EXPECT() *AccountManager_Expecter {
	return &AccountManager_Expecter{mock: &_m.Mock}
}

// GenerateYearEndAccounts provides a mock function with given fields: ctx, year, valuations
func (_m *AccountManager) GenerateYearEndAccounts(ctx context.Context, year int, valuations []tax.Valuation) common.HttpError {
	ret := _m.Called(ctx, year, valuations)

	if len(ret) == 0 {
		panic("no return value specified for GenerateYearEndAccounts")
	}

	var r0 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, int, []tax.Valuation) common.HttpError); ok {
		r0 = rf(ctx, year, valuations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.HttpError)
		}
	}

	return r0
}

// AccountManager_GenerateYearEndAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateYearEndAccounts'
type AccountManager_GenerateYearEndAccounts_Call struct {
	*mock.Call
}

// GenerateYearEndAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
//   - valuations []tax.Valuation
func (_e *AccountManager_Expecter) GenerateYearEndAccounts(ctx interface{}, year interface{}, valuations interface{}) *AccountManager_GenerateYearEndAccounts_Call {
	return &AccountManager_GenerateYearEndAccounts_Call{Call: _e.mock.On("GenerateYearEndAccounts", ctx, year, valuations)}
}

func (_c *AccountManager_GenerateYearEndAccounts_Call) Run(run func(ctx context.Context, year int, valuations []tax.Valuation)) *AccountManager_GenerateYearEndAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]tax.Valuation))
	})
	return _c
}

func (_c *AccountManager_GenerateYearEndAccounts_Call) Return(_a0 common.HttpError) *AccountManager_GenerateYearEndAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountManager_GenerateYearEndAccounts_Call) RunAndReturn(run func(context.Context, int, []tax.Valuation) common.HttpError) *AccountManager_GenerateYearEndAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecord provides a mock function with given fields: ctx, symbol
func (_m *AccountManager) GetRecord(ctx context.Context, symbol string) (tax.Account, common.HttpError) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetRecord")
	}

	var r0 tax.Account
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, string) (tax.Account, common.HttpError)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) tax.Account); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(tax.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) common.HttpError); ok {
		r1 = rf(ctx, symbol)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// AccountManager_GetRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecord'
type AccountManager_GetRecord_Call struct {
	*mock.Call
}

// GetRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol string
func (_e *AccountManager_Expecter) GetRecord(ctx interface{}, symbol interface{}) *AccountManager_GetRecord_Call {
	return &AccountManager_GetRecord_Call{Call: _e.mock.On("GetRecord", ctx, symbol)}
}

func (_c *AccountManager_GetRecord_Call) Run(run func(ctx context.Context, symbol string)) *AccountManager_GetRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AccountManager_GetRecord_Call) Return(_a0 tax.Account, _a1 common.HttpError) *AccountManager_GetRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountManager_GetRecord_Call) RunAndReturn(run func(context.Context, string) (tax.Account, common.HttpError)) *AccountManager_GetRecord_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountManager creates a new instance of AccountManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountManager {
	mock := &AccountManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
