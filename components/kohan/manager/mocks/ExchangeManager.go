// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/amanhigh/go-fun/models/common"

	mock "github.com/stretchr/testify/mock"

	tax "github.com/amanhigh/go-fun/models/tax"
)

// ExchangeManager is an autogenerated mock type for the ExchangeManager type
type ExchangeManager struct {
	mock.Mock
}

type ExchangeManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ExchangeManager) EXPECT() *ExchangeManager_Expecter {
	return &ExchangeManager_Expecter{mock: &_m.Mock}
}

// Exchange provides a mock function with given fields: ctx, exchangeables
func (_m *ExchangeManager) Exchange(ctx context.Context, exchangeables []tax.Exchangeable) common.HttpError {
	ret := _m.Called(ctx, exchangeables)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, []tax.Exchangeable) common.HttpError); ok {
		r0 = rf(ctx, exchangeables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.HttpError)
		}
	}

	return r0
}

// ExchangeManager_Exchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exchange'
type ExchangeManager_Exchange_Call struct {
	*mock.Call
}

// Exchange is a helper method to define mock.On call
//   - ctx context.Context
//   - exchangeables []tax.Exchangeable
func (_e *ExchangeManager_Expecter) Exchange(ctx interface{}, exchangeables interface{}) *ExchangeManager_Exchange_Call {
	return &ExchangeManager_Exchange_Call{Call: _e.mock.On("Exchange", ctx, exchangeables)}
}

func (_c *ExchangeManager_Exchange_Call) Run(run func(ctx context.Context, exchangeables []tax.Exchangeable)) *ExchangeManager_Exchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]tax.Exchangeable))
	})
	return _c
}

func (_c *ExchangeManager_Exchange_Call) Return(_a0 common.HttpError) *ExchangeManager_Exchange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExchangeManager_Exchange_Call) RunAndReturn(run func(context.Context, []tax.Exchangeable) common.HttpError) *ExchangeManager_Exchange_Call {
	_c.Call.Return(run)
	return _c
}

// NewExchangeManager creates a new instance of ExchangeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchangeManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExchangeManager {
	mock := &ExchangeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
