// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/amanhigh/go-fun/models/common"

	mock "github.com/stretchr/testify/mock"

	tax "github.com/amanhigh/go-fun/models/tax"
)

// GainsComputationManager is an autogenerated mock type for the GainsComputationManager type
type GainsComputationManager struct {
	mock.Mock
}

type GainsComputationManager_Expecter struct {
	mock *mock.Mock
}

func (_m *GainsComputationManager) EXPECT() *GainsComputationManager_Expecter {
	return &GainsComputationManager_Expecter{mock: &_m.Mock}
}

// ComputeGainsFromTrades provides a mock function with given fields: ctx, trades
func (_m *GainsComputationManager) ComputeGainsFromTrades(ctx context.Context, trades []tax.Trade) ([]tax.Gains, common.HttpError) {
	ret := _m.Called(ctx, trades)

	if len(ret) == 0 {
		panic("no return value specified for ComputeGainsFromTrades")
	}

	var r0 []tax.Gains
	var r1 common.HttpError
	if rf, ok := ret.Get(0).(func(context.Context, []tax.Trade) ([]tax.Gains, common.HttpError)); ok {
		return rf(ctx, trades)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []tax.Trade) []tax.Gains); ok {
		r0 = rf(ctx, trades)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Gains)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []tax.Trade) common.HttpError); ok {
		r1 = rf(ctx, trades)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}

	return r0, r1
}

// GainsComputationManager_ComputeGainsFromTrades_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputeGainsFromTrades'
type GainsComputationManager_ComputeGainsFromTrades_Call struct {
	*mock.Call
}

// ComputeGainsFromTrades is a helper method to define mock.On call
//   - ctx context.Context
//   - trades []tax.Trade
func (_e *GainsComputationManager_Expecter) ComputeGainsFromTrades(ctx interface{}, trades interface{}) *GainsComputationManager_ComputeGainsFromTrades_Call {
	return &GainsComputationManager_ComputeGainsFromTrades_Call{Call: _e.mock.On("ComputeGainsFromTrades", ctx, trades)}
}

func (_c *GainsComputationManager_ComputeGainsFromTrades_Call) Run(run func(ctx context.Context, trades []tax.Trade)) *GainsComputationManager_ComputeGainsFromTrades_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]tax.Trade))
	})
	return _c
}

func (_c *GainsComputationManager_ComputeGainsFromTrades_Call) Return(_a0 []tax.Gains, _a1 common.HttpError) *GainsComputationManager_ComputeGainsFromTrades_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GainsComputationManager_ComputeGainsFromTrades_Call) RunAndReturn(run func(context.Context, []tax.Trade) ([]tax.Gains, common.HttpError)) *GainsComputationManager_ComputeGainsFromTrades_Call {
	_c.Call.Return(run)
	return _c
}

// NewGainsComputationManager creates a new instance of GainsComputationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGainsComputationManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *GainsComputationManager {
	mock := &GainsComputationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
