// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amanhigh/go-fun/models/common"
	"github.com/amanhigh/go-fun/models/tax"
	mock "github.com/stretchr/testify/mock"
)

// NewCapitalGainManager creates a new instance of CapitalGainManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCapitalGainManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *CapitalGainManager {
	mock := &CapitalGainManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CapitalGainManager is an autogenerated mock type for the CapitalGainManager type
type CapitalGainManager struct {
	mock.Mock
}

type CapitalGainManager_Expecter struct {
	mock *mock.Mock
}

func (_m *CapitalGainManager) EXPECT() *CapitalGainManager_Expecter {
	return &CapitalGainManager_Expecter{mock: &_m.Mock}
}

// GetGainsForYear provides a mock function for the type CapitalGainManager
func (_mock *CapitalGainManager) GetGainsForYear(ctx context.Context, year int) ([]tax.Gains, common.HttpError) {
	ret := _mock.Called(ctx, year)

	if len(ret) == 0 {
		panic("no return value specified for GetGainsForYear")
	}

	var r0 []tax.Gains
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tax.Gains, common.HttpError)); ok {
		return returnFunc(ctx, year)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tax.Gains); ok {
		r0 = returnFunc(ctx, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.Gains)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) common.HttpError); ok {
		r1 = returnFunc(ctx, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// CapitalGainManager_GetGainsForYear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGainsForYear'
type CapitalGainManager_GetGainsForYear_Call struct {
	*mock.Call
}

// GetGainsForYear is a helper method to define mock.On call
//   - ctx context.Context
//   - year int
func (_e *CapitalGainManager_Expecter) GetGainsForYear(ctx interface{}, year interface{}) *CapitalGainManager_GetGainsForYear_Call {
	return &CapitalGainManager_GetGainsForYear_Call{Call: _e.mock.On("GetGainsForYear", ctx, year)}
}

func (_c *CapitalGainManager_GetGainsForYear_Call) Run(run func(ctx context.Context, year int)) *CapitalGainManager_GetGainsForYear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CapitalGainManager_GetGainsForYear_Call) Return(gainss []tax.Gains, httpError common.HttpError) *CapitalGainManager_GetGainsForYear_Call {
	_c.Call.Return(gainss, httpError)
	return _c
}

func (_c *CapitalGainManager_GetGainsForYear_Call) RunAndReturn(run func(ctx context.Context, year int) ([]tax.Gains, common.HttpError)) *CapitalGainManager_GetGainsForYear_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTaxGains provides a mock function for the type CapitalGainManager
func (_mock *CapitalGainManager) ProcessTaxGains(ctx context.Context, gains []tax.Gains) ([]tax.INRGains, common.HttpError) {
	ret := _mock.Called(ctx, gains)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTaxGains")
	}

	var r0 []tax.INRGains
	var r1 common.HttpError
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tax.Gains) ([]tax.INRGains, common.HttpError)); ok {
		return returnFunc(ctx, gains)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tax.Gains) []tax.INRGains); ok {
		r0 = returnFunc(ctx, gains)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tax.INRGains)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []tax.Gains) common.HttpError); ok {
		r1 = returnFunc(ctx, gains)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.HttpError)
		}
	}
	return r0, r1
}

// CapitalGainManager_ProcessTaxGains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTaxGains'
type CapitalGainManager_ProcessTaxGains_Call struct {
	*mock.Call
}

// ProcessTaxGains is a helper method to define mock.On call
//   - ctx context.Context
//   - gains []tax.Gains
func (_e *CapitalGainManager_Expecter) ProcessTaxGains(ctx interface{}, gains interface{}) *CapitalGainManager_ProcessTaxGains_Call {
	return &CapitalGainManager_ProcessTaxGains_Call{Call: _e.mock.On("ProcessTaxGains", ctx, gains)}
}

func (_c *CapitalGainManager_ProcessTaxGains_Call) Run(run func(ctx context.Context, gains []tax.Gains)) *CapitalGainManager_ProcessTaxGains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []tax.Gains
		if args[1] != nil {
			arg1 = args[1].([]tax.Gains)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CapitalGainManager_ProcessTaxGains_Call) Return(iNRGainss []tax.INRGains, httpError common.HttpError) *CapitalGainManager_ProcessTaxGains_Call {
	_c.Call.Return(iNRGainss, httpError)
	return _c
}

func (_c *CapitalGainManager_ProcessTaxGains_Call) RunAndReturn(run func(ctx context.Context, gains []tax.Gains) ([]tax.INRGains, common.HttpError)) *CapitalGainManager_ProcessTaxGains_Call {
	_c.Call.Return(run)
	return _c
}
