// Code generated by MockGen. DO NOT EDIT.
// Source: json.go
//
// Generated by this command:
//
//	mockgen -package gotest -destination json_mock.go -source json.go
//

// Package gotest is a generated GoMock package.
package gotest

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPersonEncoder is a mock of PersonEncoder interface.
type MockPersonEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockPersonEncoderMockRecorder
}

// MockPersonEncoderMockRecorder is the mock recorder for MockPersonEncoder.
type MockPersonEncoderMockRecorder struct {
	mock *MockPersonEncoder
}

// NewMockPersonEncoder creates a new mock instance.
func NewMockPersonEncoder(ctrl *gomock.Controller) *MockPersonEncoder {
	mock := &MockPersonEncoder{ctrl: ctrl}
	mock.recorder = &MockPersonEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonEncoder) EXPECT() *MockPersonEncoderMockRecorder {
	return m.recorder
}

// DecodePerson mocks base method.
func (m *MockPersonEncoder) DecodePerson(encodedPerson string) (person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodePerson", encodedPerson)
	ret0, _ := ret[0].(person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodePerson indicates an expected call of DecodePerson.
func (mr *MockPersonEncoderMockRecorder) DecodePerson(encodedPerson any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodePerson", reflect.TypeOf((*MockPersonEncoder)(nil).DecodePerson), encodedPerson)
}

// EncodePerson mocks base method.
func (m *MockPersonEncoder) EncodePerson(p person) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodePerson", p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodePerson indicates an expected call of EncodePerson.
func (mr *MockPersonEncoderMockRecorder) EncodePerson(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodePerson", reflect.TypeOf((*MockPersonEncoder)(nil).EncodePerson), p)
}
