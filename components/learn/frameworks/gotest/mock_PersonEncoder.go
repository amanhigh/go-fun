// Code generated by mockery v2.40.2. DO NOT EDIT.

package gotest

import mock "github.com/stretchr/testify/mock"

// MockEncoder is an autogenerated mock type for the PersonEncoder type
type MockEncoder struct {
	mock.Mock
}

type MockEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncoder) EXPECT() *MockEncoder_Expecter {
	return &MockEncoder_Expecter{mock: &_m.Mock}
}

// DecodePerson provides a mock function with given fields: encodedPerson
func (_m *MockEncoder) DecodePerson(encodedPerson string) (Person, error) {
	ret := _m.Called(encodedPerson)

	if len(ret) == 0 {
		panic("no return value specified for DecodePerson")
	}

	var r0 Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Person, error)); ok {
		return rf(encodedPerson)
	}
	if rf, ok := ret.Get(0).(func(string) Person); ok {
		r0 = rf(encodedPerson)
	} else {
		r0 = ret.Get(0).(Person)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(encodedPerson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncoder_DecodePerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodePerson'
type MockEncoder_DecodePerson_Call struct {
	*mock.Call
}

// DecodePerson is a helper method to define mock.On call
//   - encodedPerson string
func (_e *MockEncoder_Expecter) DecodePerson(encodedPerson interface{}) *MockEncoder_DecodePerson_Call {
	return &MockEncoder_DecodePerson_Call{Call: _e.mock.On("DecodePerson", encodedPerson)}
}

func (_c *MockEncoder_DecodePerson_Call) Run(run func(encodedPerson string)) *MockEncoder_DecodePerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEncoder_DecodePerson_Call) Return(p Person, err error) *MockEncoder_DecodePerson_Call {
	_c.Call.Return(p, err)
	return _c
}

func (_c *MockEncoder_DecodePerson_Call) RunAndReturn(run func(string) (Person, error)) *MockEncoder_DecodePerson_Call {
	_c.Call.Return(run)
	return _c
}

// EncodePerson provides a mock function with given fields: p
func (_m *MockEncoder) EncodePerson(p Person) (string, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for EncodePerson")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(Person) (string, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(Person) string); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(Person) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncoder_EncodePerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodePerson'
type MockEncoder_EncodePerson_Call struct {
	*mock.Call
}

// EncodePerson is a helper method to define mock.On call
//   - p Person
func (_e *MockEncoder_Expecter) EncodePerson(p interface{}) *MockEncoder_EncodePerson_Call {
	return &MockEncoder_EncodePerson_Call{Call: _e.mock.On("EncodePerson", p)}
}

func (_c *MockEncoder_EncodePerson_Call) Run(run func(p Person)) *MockEncoder_EncodePerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Person))
	})
	return _c
}

func (_c *MockEncoder_EncodePerson_Call) Return(jsonString string, err error) *MockEncoder_EncodePerson_Call {
	_c.Call.Return(jsonString, err)
	return _c
}

func (_c *MockEncoder_EncodePerson_Call) RunAndReturn(run func(Person) (string, error)) *MockEncoder_EncodePerson_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncoder creates a new instance of MockEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncoder {
	mock := &MockEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
