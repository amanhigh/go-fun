// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	gotest "github.com/amanhigh/go-fun/components/learn/frameworks/gotest"
	mock "github.com/stretchr/testify/mock"
)

// PersonEncoder is an autogenerated mock type for the PersonEncoder type
type PersonEncoder struct {
	mock.Mock
}

// DecodePerson provides a mock function with given fields: encodedPerson
func (_m *PersonEncoder) DecodePerson(encodedPerson string) (gotest.Person, error) {
	ret := _m.Called(encodedPerson)

	if len(ret) == 0 {
		panic("no return value specified for DecodePerson")
	}

	var r0 gotest.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (gotest.Person, error)); ok {
		return rf(encodedPerson)
	}
	if rf, ok := ret.Get(0).(func(string) gotest.Person); ok {
		r0 = rf(encodedPerson)
	} else {
		r0 = ret.Get(0).(gotest.Person)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(encodedPerson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodePerson provides a mock function with given fields: p
func (_m *PersonEncoder) EncodePerson(p gotest.Person) (string, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for EncodePerson")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(gotest.Person) (string, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(gotest.Person) string); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(gotest.Person) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersonEncoder creates a new instance of PersonEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonEncoder {
	mock := &PersonEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
