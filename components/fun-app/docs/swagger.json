{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/person": {
            "get": {
                "description": "List Person and Optionally Search",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "List Person and Search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter persons by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter persons by gender",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter persons by age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "name",
                            "gender",
                            "age"
                        ],
                        "type": "string",
                        "description": "Sort by",
                        "name": "sort_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/fun.PersonList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new person with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Create a new person",
                "parameters": [
                    {
                        "description": "Person Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fun.PersonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Id of created person",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/person/{id}": {
            "get": {
                "description": "Get a person's details by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Get a person by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/fun.Person"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a person's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Update a person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Person Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fun.PersonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UPDATED",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete persons by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Delete persons by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DELETED",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/person/{id}/audit": {
            "get": {
                "description": "List Person Audit by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "List Person Audit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/fun.PersonAudit"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.PaginatedResponse": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                }
            }
        },
        "fun.Person": {
            "type": "object",
            "required": [
                "age",
                "gender",
                "name"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 150,
                    "minimum": 1
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "MALE",
                        "FEMALE"
                    ]
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Validations - https://gin-gonic.com/docs/examples/binding-and-validation/",
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 1
                }
            }
        },
        "fun.PersonAudit": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "auditID": {
                    "description": "Audit Fields",
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "fun.PersonList": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/common.PaginatedResponse"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/fun.Person"
                    }
                }
            }
        },
        "fun.PersonRequest": {
            "type": "object",
            "required": [
                "age",
                "gender",
                "name"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 150,
                    "minimum": 1
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "MALE",
                        "FEMALE"
                    ]
                },
                "name": {
                    "description": "Validations - https://gin-gonic.com/docs/examples/binding-and-validation/",
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 1
                }
            }
        }
    }
}