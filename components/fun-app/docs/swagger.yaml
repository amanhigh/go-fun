definitions:
  common.PaginatedResponse:
    properties:
      total:
        type: integer
    type: object
  fun.Person:
    properties:
      age:
        maximum: 150
        minimum: 1
        type: integer
      gender:
        enum:
        - MALE
        - FEMALE
        type: string
      id:
        type: string
      name:
        description: Validations - https://gin-gonic.com/docs/examples/binding-and-validation/
        maxLength: 25
        minLength: 1
        type: string
    required:
    - age
    - gender
    - name
    type: object
  fun.PersonList:
    properties:
      metadata:
        $ref: '#/definitions/common.PaginatedResponse'
      records:
        items:
          $ref: '#/definitions/fun.Person'
        type: array
    type: object
  fun.PersonRequest:
    properties:
      age:
        maximum: 150
        minimum: 1
        type: integer
      gender:
        enum:
        - MALE
        - FEMALE
        type: string
      name:
        description: Validations - https://gin-gonic.com/docs/examples/binding-and-validation/
        maxLength: 25
        minLength: 1
        type: string
    required:
    - age
    - gender
    - name
    type: object
info:
  contact: {}
paths:
  /person:
    get:
      consumes:
      - application/json
      description: List Person and Optionally Search
      parameters:
      - description: Filter persons by name
        in: query
        name: name
        type: string
      - description: Filter persons by gender
        in: query
        name: gender
        type: string
      - description: Filter persons by age
        in: query
        name: age
        type: integer
      - description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Sort by
        enum:
        - name
        - gender
        - age
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fun.PersonList'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List Person and Search
      tags:
      - Person
    post:
      consumes:
      - application/json
      description: Create a new person with the provided data
      parameters:
      - description: Person Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fun.PersonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Id of created person
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new person
      tags:
      - Person
  /person/{id}:
    delete:
      consumes:
      - application/json
      description: Delete persons by their ID
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: DELETED
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete persons by ID
      tags:
      - Person
    get:
      consumes:
      - application/json
      description: Get a person's details by their ID
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/fun.Person'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a person by ID
      tags:
      - Person
    put:
      consumes:
      - application/json
      description: Update a person's details
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      - description: Person Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/fun.PersonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: UPDATED
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update a person
      tags:
      - Person
swagger: "2.0"
